; ************************************************************
; PROJECT: A simple terminal emulator using a comxch component
; AUTHOR: Wojciech Stryjewski
; ************************************************************

; ************************************************************
; To run this, you must do the following in order:
;
; 1. Connect a physical device, such as a Hayes compatible
;    modem, to a COM port on the computer.
; 2. Start HyperTerminal (Start Menu -> Accessories ->
;    Communications) and verify that you can communicate
;    with the device. In particular, make note of the COM port
;    used and the settings such as baud rate, number of data
;    and stop bits, and parity settings:
; 3. Fill in the <port>, <baud>, <data>, <parity>, <oddParity>
;    and <stop> arguments in this project file for the
;    "_comxchx" and "tty2" components to match the settings
;    you used in HyperTerminal.
; 4. Start the simulation of this file in VMLAB.
; 5. Try typing text into the TX window in the VMLAB Control
;    Panel. It may or may not appear in the RX window
;    depending if the device has "remote echo" turned on.
; 6. If using a Hayes compatible modem, try entering a command
;    such as "AT E1" followed by a carrige return (i.e. the
;    <Enter> key). The modem should respond with "OK" which
;    will be visible in the RX window.
; 7. If using an old external modem with LEDs that show the
;    state of the modem control lines, try pushing buttons
;    K0 and K1 in the control panel to respectively control
;    RTS and DTR. You can also look at LEDs D1 through D4 to
;    respectively observe the state of CTS, DSR, RI, and DCD.
; A. Alternatively, you could use the com0com loopback driver
;    along with the free "WCOM2" test terminal program found
;    at "http://www.comtrol.com/products/family/diag".
;    This terminal program displays the state of all modem
;    control lines in the window's status bar, and it also
;    includes toolbar buttons to toggle the state of the DTR
;    and RTS lines. Note that to use this program with com0com,
;    one of the "CNCAn" or "CNCBn" ports must be renamed to
;    a standard "COMn" name. See the "ReadMe.txt" for com0com
;    which explains how to rename the ports and how to configure
;    the OUT1 and OUT2 lines to control the RI and DCD of the
;    other loopback endpoint.
; ************************************************************

; Micro + software running
; ------------------------------------------------------------
.MICRO "ATmega8"
.PROGRAM "test.asm"
.TARGET "test.hex"

; Following lines are optional; if not included
; exactly these values are taken by default
; ------------------------------------------------------------
.POWER VDD=5 VSS=0  ; Power nodes
.CLOCK 1meg         ; Micro clock

; Micro nodes: RESET, AREF, PB0-PB7, PC0-PC6, PD0-PD7, ACO, TIM1OVF, ADC6, ADC7
; Define here the hardware around the micro
; ------------------------------------------------------------

; Cross connect comxch with TTY to create a terminal emulator
; Note that the TTY/TTY2 components actually produce the *opposite*
; parity that they should. The correct interpretation of the their
; 4th argument is 1=even and 0=odd.
X<port> _comxchx(<baud> <data> <parity> <evenParity> <stop>) tx rx
+ cts dsr ri dcd rts dtr out1 out2
Xtty TTY2(<baud> <data> <parity> <evenParity> <stop>) out tx

; Example comxch and TTY2 instance:
;Xcom1 _comxchx(9600 8 0 0 1) tx rx cts dsr ri dcd rts dtr out1 out2
;Xtty TTY2(9600 8 0 0 1) out tx

; Pull up resistors for all the push buttons below
R rts VDD 10k
R dtr VDD 10k
R out1 VDD 10k
R out2 VDD 10k
R brk VDD 10k

; Push buttons for modem control output signals and for break condition
K0 rts GND
K1 dtr GND
K2 out1 GND
K3 out2 GND
K4 brk GND

; Combine output from TTY2 component with button for break condition
X ND2 out brk nrx
X ND2 nrx VDD rx

; Invert the modem control input signals for use with LED components
X ND2 cts VDD ncts
X ND2 dsr VDD ndsr
X ND2 ri VDD nri
X ND2 dcd VDD ndcd

; Show state of modem contrl input signals with control panel LEDs
D1 VDD ncts
D2 VDD ndsr
D3 VDD nri
D4 VDD ndcd

; Plot the tx/rx signals from the COM port
; Need a large scope buffer to compensate for the slow typing
; (relative to clock speed) of the user
; ------------------------------------------------------------
.STORE 2000m
.PLOT V(tx) V(rx)


