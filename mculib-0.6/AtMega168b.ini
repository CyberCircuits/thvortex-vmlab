; 
; Definition file for ATMega168. Used the suffix 'b' to distinguish from the
; internal VMLAB model ATMega168 during the test period. The same name will cause
; to override the internal model
;
[AVRCORE]
Debug_messages = yes   ; Provides info messages to debug this file
Part_name = ATmega168  ;       
Signature = $6941E     ; The signature byte used by the programmer (not implemented yet!)
Max_clock_MHz = 16     ; Maximum clock
Flash_size_k = 16      ; In Kbytes
RAM_size = 1024        ; In bytes
EEPROM_size = 512      ; In bytes
IO_end = $100          ; The adress where the IO space ends

Register_SREG = $5F    ; Addresses for these registers. Normally this is 
Register_SPL =  $5D    ; constant in the AVR architecture....
Register_SPH =  $5E    ; If the miro has no SPH, remove or comment
;Register_RAMPZ = $5B  ; N/A in this micro
Init_SPH_SPL = RAMEND  ; This can be an address, "X" or "RAMEND"

Support_IJMP = yes     ; Some instructions are not supported in all models
Support_LJMP = yes
Support_MULT = yes
Support_YZ = yes       ; Y and Z index are not supported in all models
Support_LPM = yes
Support_SPM = yes
Support_SPM_RWW = yes  ; Supports Read-While-Write

Default_vectors_start = $00  ; For reset
Vector_size = 2              ; 1 in small micros

; Below list of ports, interrupts, etc:
;   - Interrupt list: do not include RESET. If using VMLAB internal models, use only the allowed
;     names for the given peripheral
;   - Flag/Mask registers list: dedicated registers to interrupt flag/mask bits, when
:     such flag/mask bits are not in the corresponding peripheral registers (example: TIMSK)
;   - Port list: generic port names. Details in dedicated sections
;   - Peripheral list: use arbitray names to identify them, to be defined in later sections.
;     do not include EEPROM
;
Interrupt_list =  "INT0, INT1, IOCH0, IOCH1, IOCH2, WDOGT, COMPA2,"              ; Line continuation
Interrupt_list2 = "COMPB2, OVF2, CAPT1, COMPA1, COMPB1, OVF1, COMPA0,"           ; by adding 2, 3, etc
Interrupt_list3 = "COMPB0, OVF0, SPIC, UART0_RXC, UART0_UDRE, UART0_TXC, ADCC,"  ; do not forget comma at the end  
Interrupt_list4 = "EE_RDY, ANA_COMP, TWI_INT, SPMR"                         

Port_8_list = "PB, PC, PD"            ; Generic 8 bit port names: PAx (x = 0, 1,..7)
Other_pin_list = "ADC6, ADC7"         ; Non-port pins
;Debug_pin_list = "Aux1, Aux2, Aux3"  ; Auxiliary, non-real pins for debugging, etc

Peripheral_list = "WDOG, TIMER0, TIMER1, TIMER2, UART, COMP, ADC, SPI, TWI"
Flag_register_list = "TIFR0, TIFR1, TIFR2, EIFR, PCIFR"
Mask_register_list = "TIMSK0, TIMSK1, TIMSK2, EIMSK, PCICR"
Fuse_list = "CKSEL, SUT, CKOUT, CKDIV8, BODLEVEL, EESAVE, WDTON, SPIEN, DWEN, RSTDISBL, BOOTRST, BOOTSZ"


; Boot loader stuff. "_XX" are arbitray names, just to make more clear the fuse assignement
;
Flash_page_size = 64          ; In bytes, for SPM instruccions, etc.
Boot_reset_fuse = BOOTRST     ; Fuse names controlling it. Must have been defined in "Fuse_list"
Boot_size_fuse =  BOOTSZ      ; 
Boot_size_map =  "_00=$1C00, _01=$1E00, _10=$1F00, _11=$1F80"    ; For Mega168
;Boot_size_map = "_00=$0C00, _01=$0E00, _10=$0F00, _11=$0F80"    ; For Mega48

; Interrupts description. Must have been defined in "Interrupt_list"
; *****************************************************************
; Not necessary to define here all the interrupts: only the ones
; that need special treatment. Three parameter can be defined:
; 'Vector', 'Reset_status' and 'Flag_autoclear'. if no 'Vector' is defined,
; vectors will be assigned sequentially 1, 2, .... (taking into account 'Vector_size'),
; and the reset status will be 0
;
[Interrupt:UART0_UDRE]   ; USART Data Register Empty
;Vector = $FF            ; An optional Vector can be defined to test, etc
Reset_status = 1         ; Flag is initially set (default is 0)
Flag_autoclear = no      ; This flag is not cleared when the interrupt is served

[Interrupt:UART0_RXC] 	
Flag_autoclear = no      ; If ommited, the default is "yes"

; Flag registers description. Must have been defined in "Flag_register_list"
; The "Bit_interrupts" field must contain the involved interrupt IDs, by
; bit, as defined previously
;*************************************************************************
;
[Flag_register:TIFR0] ;   b7     .    .    .     .     .     .          b0         
Bit_interrupts =       "  *  ,  *  ,  *  ,  *  ,  *  , COMPB0, COMPA0, OVF0" 
Bit_names =            "  *  ,  *  ,  *  ,  *  ,  *  , OCF0B, OCF0A, TOV0"
Address = $35  	

[Flag_register:TIFR1] 
Bit_interrupts =       " * , * , CAPT1, * , * , COMPB1, COMPA1, OVF1"
Bit_names =            " * , * , ICF1,  * , * , OCF1B, OCF1A, TOV1"
Address = $36

[Flag_register:TIFR2]
Bit_interrupts =       " *, *, *, *, *, COMPB2, COMPA2, OVF2"
Bit_names =            "*, *, *, *, *, OCF2B, OCF2A, TOV2"
Address = $37
 
[Flag_register:EIFR]
Bit_interrupts =       "*, *, *, *, *, *, INT1, INT0"
Bit_names =            "*, *, *, *, *, *, INTF1, INTF0"
Address = $3C

[Flag_register:PCIFR]
Bit_names =            "*, *, *, *, *, PCIF2, PCIF1, PCIF0"
Bit_interrupts =       "*, *, *, *, *, IOCH2, IOCH1, IOCH0"
Address = $3B


; Mask register description. Must have been defined in "Mask_register_list"
; Same procedure as in flags
; *************************************************************************
;
[Mask_register:TIMSK0]       
Bit_interrupts =  "* ,* , *, *, * , COMPB0, COMPA0, OVF0" 
Bit_names =       "* ,* , *, *, * , OCIE0B, OCIE0A, TOIE0"
Address = $6E

[Mask_register:TIMSK1]
Bit_interrupts = " * , * , CAPT1, * , * , COMPB1, COMPA1, OVF1"
Bit_names =      "*, *, ICIE1, *, *, OCIE1B, OCIE1A, TOIE1"
Address = $6F

[Mask_register:TIMSK2]
Bit_interrupts = "*, *, *, *, *, COMPB2, COMPA2, OVF2"
Bit_names =      "*, *, *, *, *, OCIE2B, OCIE2A, TOIE2"
Address = $70

[Mask_register:EIMSK]
Bit_interrupts = "*, *, *, *, *, *, INT1, INT0"
Bit_names =      "*, *, *, *, *, *, INT1, INT0"
Address = $3D

[Mask_register:PCICR]
Bit_interrupts = "*, *, *, *, *, IOCH2, IOCH2, IOCH0"
Bit_names =      "*, *, *, *, *, PCIE2, PCIE1, PCIE0"
Address = $68


; Ports description. Must have been defined in "Port_list"
; *******************************************************
;
[Port_8:PB]
Exist_mask = $FF                           ; All bits PB0 .. PB7 exist for this port
Register_map = "DR=$25, DDR=$24, PIN=$23"  ; Do not change order: DR, DDR, PIN
Toggle_on_PIN_write = yes                  ; toggles PORT on PIN register write
                                           ; if ommited, no toggle is active
[Port_8:PC]
Exist_mask = $7F                           ; PC7 does not exist for this port 
Register_map = "DR=$28, DDR=$27, PIN=$26" 
Toggle_on_PIN_write = yes

[Port_8:PD]	
Exist_mask = $FF  
Register_map = "DR=$2B, DDR=$2A, PIN=$29" 
Toggle_on_PIN_write = yes


; The DUMMY peripheral
; ********************
; Special purpose registers that need an special handling, have to be processed
; by the "dummy" peripheral DLL. If no DLL specified, they will be created as
; plain RAM registers, with no special add-in process
; 
[Peripheral:DUMMY]
Register_map =  "PCMSK0=$6B, PCMSK1=$6C, PCMSK2=$6D, EICRA=$69,"   ; Do not forget the comma
Register_map2 = "CLKPR=$61, PRR=$64, SMCR=$53, GTCCR=$43,"         ; at the end, if using line
Register_map3 = "SPMCSR=$57, OSCCAL=$66, GPIOR0=$3E, GPIOR1=$4A,"  ; continuation, xx2, xx3, etc
Register_map4 = "GPIOR2=$4B, MCUCR=$55, MCUSR=$54"

Interrupt_map =  "Ext0=INT0, Ext1=INT1, IOChange0=IOCH0, IOChange1=IOCH1,"
Interrupt_map2 = "IOChange2=IOCH2, SPMready=SPMR"  ; Ext0, Ext1, etc. are arbitrary names. Mapped by order

DLL_model = dummy168  ; To be processed by 'DUMMY168.DLL'


; EEPROM. Size defined in [AVRCORE] 'EEPROM_size'. If size is zero, this section is ommited
; *****************************************************************************************
;
[Peripheral:EEPROM]
DLL_model = eeprom
Register_map = "EEARL=$41, EEARH=$42, EEDR=$40, EECR=$3F"
Interrupt_map = "ERDY=EE_RDY"
Factory_set = $FF   ; Says bytes initial setting
Version = 3

; Peripherals description. Must have been defined in "Peripheral_list"
; *******************************************************************
;                            	
[Peripheral:WDOG]
DLL_model = wdog
Register_map = "WDTCR=$60" 
Interrupt_map = "watchdog_timeout=WDOGT" 

[Peripheral:TIMER0] 
DLL_model = timer0_168       ; Coded in timer0_168.cpp -> timer0_168.dll
Register_map = "TCCR0A=$44, TCCR0B=$45, TCNT0=$46, OCR0A=$47, OCR0B=$48"
Port_map = "OCA=PD6, OCB=PD5, T0=PD4" 
Interrupt_map = "CMPA=COMPA0, CMPB=COMPB0, OVF=OVF0" ; Interrupts related to this peripheral
                                                     ; will be mapped into the C identifiers by order
[Peripheral:TIMER1]
DLL_model = timerN_168       ; Coded in timerN_168.cpp -> timerN_168.dll
Register_map = "TCCR1A=$80, TCCR1B=$81, TCCR1C=$82, TCNT1L=$84, TCNT1H=$85, OCR1AL=$88, OCR1AH=$89, OCR1BL=$8A, OCR1BH=$8B, ICR1L=$86, ICR1H=$87"
Port_map = "OCA=PB1, OCB=PB2, T1=PD5, ICP=PB0"
Interrupt_map = "CMPA=COMPA1, CMPB=COMPB1, OVF=OVF1, CAPT=CAPT1"

[Peripheral:TIMER2]
DLL_model = timer2_168       ; Coded in timer2_168.cpp -> timer2_168.dll
Register_map = "TCCR2A=$B0, TCCR2B=$B1, TCNT2=$B2, OCR2A=$B3, OCR2B=$B4, ASSR=$B6"
Port_map = "OCA=PB3, OCB=PD3, TOSC1=PB6" 
Interrupt_map = "CMPA=COMPA2, CMPB=COMPB2, OVF=OVF2" ; Interrupts related to this peripheral
                                                     ; will be mapped into the C identifiers by order
[Peripheral:UART]
Internal_model = UART  ; Allows a maximum of two instances (see at the file end)
Register_map = "UDR=$C6, USR=$C0, UCR=$C1, UBRR=$C4, UBRRH=$C5, UCSRC=$C2"
Port_map = "TX=PD1, RX=PD0"
Interrupt_map = "RX_completed=UART0_RXC, Data_empty=UART0_UDRE, TX_completed=UART0_TXC"

[Peripheral:COMP]
DLL_model = comp
Register_map = "ACSR=$50, DIDR1=$7F"
Port_map = "AIN0=PD6, AIN1=PD7"
Interrupt_map = "ACI=ANA_COMP"

[Peripheral:ADC]
Internal_model = ADC  ; Register ADCSRB unsupported 
Register_map = "ADMUX=$7C, ADCSR=$7A, ADCL=$78, ADCH=$79, ADCSRB=$7B, DIDR0=$7E"           
Port_map = "ADC0=PC0, ADC1=PC1, ADC2=PC2, ADC3=PC3, ADC4=PC4, ADC5=PC5, ADC6=ADC6, ADC7=ADC7"
Interrupt_map = "ADC_completed=ADCC"
Version = 1     ; Internal bandgap

[Peripheral:SPI]	
Internal_model = SPI      
Register_map = "SPCR=$4C, SPSR=$4D, SPDR=$4E"
Port_map = "MISO=PB4, MOSI=PB3, SCK=PB5, SSB=PB2"
Interrupt_map = "SPI_completed=SPIC"
Version = 1               ; Allows double speed

[Peripheral:TWI]
Internal_model = TWI   ; Register TWAMR unsupported 
Register_map = "TWBR=$B8, TWCR=$BC, TWSR=$B9, TWDR=$BB, TWAR=$BA, TWAMR=$BD"
Port_map = "SCL=PC5, SDA=PC4"
Interrupt_map = "TWI_interrupt=TWI_INT"
    
; Fuses. They are defined in a 16 bits wide basis, indicating bit position, nr
; of bits assigned, and default value. They can be retrieved by
; the GET_FUSE(name) function in the DLL. Use the same names as in AVR manuals
; ************************************************************************
;
[Fuse:CKSEL]
Bit_position = 0         ; Start position for CKSEL0
N_of_bits =  4           ; Meaning: exists CKSEL3, CKSEL2, CKSEL1, CKSEL0 
Default_value =  b0010   ; CKSEL1 = 1 (unprogrammed).

[Fuse:SUT]
Bit_position = 4         ; SUT0 stars at bit 4
N_of_bits = 2            ; SUT1, SUT0
Default_value = b10      ; SUT1 = 1 (unprogrammed)

[Fuse:CKOUT]
Bit_position = 6         
N_of_bits = 1
Default_value = 1

[Fuse:CKDIV8]
Bit_position = 7         
N_of_bits = 1
Default_value = 0

[Fuse:BODLEVEL]
Bit_position = 8
N_of_bits = 3
Default_value = b111

[Fuse:EESAVE]
Bit_position = 11
N_of_bits = 1
Default_value = 1

[Fuse:WDTON]
Bit_position = 12
N_of_bits = 1
Default_value = 1  

[Fuse:SPIEN]
Bit_position = 13
N_of_bits = 1
Default_value = 0 ; Programmed  

[Fuse:DWEN]
Bit_position = 14
N_of_bits = 1
Default_value = 1

[Fuse:RSTDISBL]
Bit_position = 15
N_of_bits = 1
Default_value = 1

[Fuse:BOOTRST]
Bit_position = 16
N_of_bits = 1
Default_value = 1

[Fuse:BOOTSZ]
Bit_position = 17
N_of_bits = 2
Default_value = b00


; ***********************************************************************************
; INTERNAL MODELS. The 'Version' parameter allows to define several options
;
;  Name     Description                   'Regist_map' sequence            'Port_map' seq.    Valid interrupt names (see D)
; --------  ----------------------------  -------------------------------  -----------------  ------------------------------
; TIMER8_0  8 bits timer in early AVRs     TCCR0,TCNT0                     T0                 OVF0
; TIMER8_1  8 bits timer with Comp / PWM   TCCR,TCNT,OCR2,ASSR             OC                 0VF0,COMPA0 / OVF2,COMPA2
; TIMER8_2  The one of Tiny15              TCCR1,TCNT1,OCR1A,OCR1B,SFIOR   OC1                OVF0
; TIMER16   16 bits with Cap & Comp A/B    TCCRA,TCCRB,TCNTH,TCNTL,OCRAH,  OCA,OCB,ICP,XCLK   OVF1,COMPA1,COMPB1,CAPT1 / 
;                                          OCRAL,OCRBH,OCRBL,ICRH,ICRL                        OVF3,COMPA3,COMPB3,CAPT3
; TWI       TWI device                     TWBR,TWCR,TWSR,TWDR,TWAR        SCL,SDA            TWI_INT  
; UART      UART device                    UDR,USR,UCR,UBRR,UBRRHI,UCSRC   RX,TX              UART0_TXC,UART0_UDRE,UART0_RXC /
; 																						      UART1_TXC,UART1_UDRE,UART1_RXC
; WDOG      Watchdog device                WDTCR                                              WDOGT
; SPI       SPI device (see A)             SPCR,SPSR,SPDR                  MISO,MOSI,SCK,SSB  SPIC
; COMP      Analog comparator (see B)      ACSR                            PLUS,MINUS         ANA_COMP
; ADC       ADC device (see C)             ADMUX,ADCSR,ADCL,ADCH           CH0,CH1,CH2,CH3,   ADCC  
;                                                                          CH4,CH5,CH6,CH7
; EEPROM    EEPROM device                  EEARL,EEDR,EECR,EEARH							  EE_RDY						
; ---------------------------------------------------------------------------------------------------------------------------
;
; Notes:
;             Meaning of 'Version' paramter:
;             ------------------------------
; (A) SPI     0: default; 1: allows double speed
; (B) COMP    0: default; 1: the version with internal bandgap
; (C) ADC     0: default; 1: 'Tiny'-like; 2: Mega8-like; 3: Mega128-like
;
; (D) Interrupt mapping by instance name.
;     Some models allow a maximum of two instances, using one of the two possible interrupt
;     sets. The interrupt mapping is performed by the instance name, with the following 
;     rules:
;
;     ** UART ** (max 2 instances)
;     Instance names "UART1", "USART1", "UART_1", "USART_1": 
;        --> Interupt set: UART1_TXC, UART1_UDRE, UART1_RXC 
;     Other name:
;        --> Interupt set: UART0_TXC, UART0_UDRE, UART0_RXC 
; 
;     ** TIMER8_1 ** (max 2 instances)
;     Instance names "TIMER0", "TIMER_0": 
;        --> Interupt set: 0VF0, COMPA0
;     Other name:
;        --> Interupt set: 0VF2, COMPA2
; 
;     ** TIMER16 ** (max 2 instances)
;     Instance names "TIMER3", "TIMER_3": ; 
;        --> Interupt set: OVF3, COMPA3, COMPB3, CAPT3
;     Other name:
;        --> Interupt set: OVF1, COMPA1, COMPB1, CAPT1

